{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
{! var global = data; !}

.. Classes and methods

{+ data.alias +}
================================================================================

.. class-title

<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
{! output += html_to_rst(resolve_links(data.classDesc)); !}

<if test="data.deprecated">
.. deprecated:: {+ data.deprecated +}
</if>
<if test="data.since">
.. versionadded:: {+ data.since +}
</if>

<if test="data.requires.length">
.. important::
    **Requires:** <for each="item" in="data.requires">{+ item +}</for>
</if>
<if test="data.see.length">
.. seealso::
    <for each="item" in="data.see">:js:ref:`{+ item +}`

    </for>
</if>

<if test="data.author">
.. codeauthor:: {+data.author+}
</if>

<if test="data.example.length">
Examples
--------

<for each="example" in="data.example">
.. code-block:: javascript

    {+ trim(example) +}
</for>
</if>

Constructor
-----------

{! output += html_to_rst(resolve_links(data.desc)); !}

.. js:class:: {+ data.alias +}<if test="get_type(data) != 'Namespace '">{+ makeSignature(data.params) +}</if>

<if test="data.augments.length">
    Bases: <for each="item" in="data.augments">:js:class:`{+ item +}` </for>
</if>
<if test="data.params.length">
    <for each="item" in="data.params">
    :param {+ item.type +} {+ item.name +}:
{+ indentLines(item.desc, 8) +} <if test="item.defaultValue">(*Default*: {+item.defaultValue+})</if>
    </for>
</if>
<if test="data.exceptions.length">
    <for each="item" in="data.exceptions">
    :throws<if test="item.type"> {+ item.type +}</if>:
        <if test="item.name">{+ item.name +}: </if>{+ html_to_rst(resolve_links(item.desc)) +}
    </for>
</if>
<if test="data.returns.length">
    <for each="item" in="data.returns">
    :returns {+ item.type +}:
        {+ html_to_rst(resolve_links(item.desc)) +}
    </for>
</if>

</if>

<if test="defined(ownMethods) && ownMethods.length">
Methods
-------

.. class-methods

<for each="data" in="ownMethods">

.. js:function:: {!
	if (data.returns.length < 1)
		output+="void ";
	else
		output+=data.returns[0].type + " ";
	!}{+ data.name +}<if test="get_type(data) != 'Namespace '">{+ makeSignature(data.params) +}</if>

{+ indentLines(resolve_links(data.desc), 4) +}

<if test="data.params.length">
    <for each="item" in="data.params">
    :param<if test="item.type"> {+ item.type +}</if><if test="item.name"> {+ item.name +}</if>:
{+ indentLines(resolve_links(item.desc), 8) +} <if test="item.defaultValue">(*Default*: {+item.defaultValue+})</if>
    </for>
</if>
<if test="data.exceptions.length">
    <for each="item" in="data.exceptions">
    :throws<if test="item.type"> {+ item.type +}</if>:
        <if test="item.name">{+ item.name +}: </if>{+ html_to_rst(resolve_links(item.desc)) +}
    </for>
</if>
<if test="data.returns.length">
    <if test="data.returns[0].desc">:returns: {+ html_to_rst(resolve_links(data.returns[0].desc)) +}</if>
</if>

<if test="data.deprecated">
.. deprecated:: {+ data.deprecated +}
</if>

<if test="data.since">
.. versionadded:: {+ data.since +}
</if>

<if test="data.requires.length">
.. important::
    **Requires:** <for each="item" in="data.requires">{+ item +}</for>
</if>
<if test="data.see.length">
.. seealso::

    <for each="item" in="data.see">{+ item +}</for>
</if>

<if test="data.author">
.. codeauthor:: {+data.author+}
</if>

<if test="data.example.length">
<for each="example" in="data.example">
.. code-block:: javascript

    {+ trim(example) +}
</for>
</if>

</for>
</if>

<if test="defined(ownProperties) && ownProperties.length">
Attributes
----------

.. class-attributes

<for each="member" in="ownProperties">
{+ member.name +}
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:attribute:: {+ member.name +} {!
            if (member.isPrivate) output += "(private)";
            if (member.isInner) output += "(inner)";
            if (member.isStatic) output += "(static)";
            if (member.isConstant) output += "(constant)";
        !}
<if test="member.defaultValue">(*Default*: {+ member.defaultValue +})</if>

{+ member.desc +}

<if test="member.deprecated">
.. deprecated:: {+ member.deprecated +}
</if>
<if test="member.since">
.. versionadded:: {+ member.since +}
</if>

<if test="member.requires.length">
.. important::
    **Requires:** <for each="item" in="member.requires">{+ item +}</for>
</if>
<if test="member.see.length">
.. seealso::

    <for each="item" in="member.see">{+ item +}</for>
</if>

<if test="member.author">
.. codeauthor:: {+member.author+}
</if>

<if test="member.example.length">
<for each="example" in="member.example">
.. code-block:: javascript

    {+ trim(example) +}
</for>
</if>

</for>
</if>

<if test="defined(ownEvents) && ownEvents.length">
Events
------

{+ member.name +}
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

<for each="member" in="ownEvents">
.. js:class:: {+ member.name +} {!
            if (member.isPrivate) output += "(private)";
            if (member.isInner) output += "(inner)";
            if (member.isStatic) output += "(static)";
            if (member.isConstant) output += "(constant)";
        !}
<if test="member.defaultValue">(Default: {+ member.defaultValue +})</if>

{+ data.desc +}

<if test="data.deprecated">
.. deprecated:: {+ data.deprecated +}
</if>
<if test="data.since">
.. versionadded:: {+ data.since +}
</if>

<if test="data.requires.length">
.. important::
    **Requires:** <for each="item" in="data.requires">{+ item +}</for>
</if>
<if test="data.see.length">
.. seealso::

    <for each="item" in="data.see">{+ item +}</for>
</if>

<if test="data.author">
.. codeauthor:: {+data.author+}
</if>

<if test="data.example.length">
<for each="example" in="data.example">
.. code-block:: javascript

    {+ trim(example) +}
</for>
</if>

</for>
</if>
